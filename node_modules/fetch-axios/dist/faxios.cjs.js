"use strict";

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
  extendStatics =
    Object.setPrototypeOf ||
    ({__proto__: []} instanceof Array &&
      function(d, b) {
        d.__proto__ = b;
      }) ||
    function(d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done
        ? resolve(result.value)
        : new P(function(resolve) {
            resolve(result.value);
          }).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
      label: 0,
      sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: [],
    },
    f,
    y,
    t,
    g;
  return (
    (g = {next: verb(0), throw: verb(1), return: verb(2)}),
    typeof Symbol === "function" &&
      (g[Symbol.iterator] = function() {
        return this;
      }),
    g
  );
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (
          ((f = 1),
          y &&
            (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) &&
            !(t = t.call(y, op[1])).done)
        )
          return t;
        if (((y = 0), t)) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {value: op[1], done: false};
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5) throw op[1];
    return {value: op[0] ? op[1] : void 0, done: true};
  }
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {error: error};
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
  return ar;
}

function serialize(obj) {
  var str = [];
  for (var p in obj) {
    if (obj.hasOwnProperty(p)) {
      str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
    }
  }
  return str.join("&");
}
function getFormData(object) {
  var formData = new FormData();
  Object.keys(object).forEach(function(key) {
    return formData.append(key, object[key]);
  });
  return formData;
}
function transformHeader(headers) {
  var keys = __spread(headers.keys());
  return keys.reduce(function(prev, key) {
    prev[key] = headers.get(key);
    return prev;
  }, {});
}
function resolveTasks(context, functions) {
  var getCtx = function() {
    return context;
  };
  return functions.reduce(function(promise, func) {
    return promise.then(func).then(getCtx);
  }, Promise.resolve(context));
}
function promiseTimeout(ms, promise) {
  // Create a promise that rejects in <ms> milliseconds
  var timeout = new Promise(function(resolve, reject) {
    var id = setTimeout(function() {
      clearTimeout(id);
      reject("Timeout");
    }, ms);
  });
  // Returns a race between our timeout and the passed in promise
  return Promise.race([promise, timeout]);
}

var defaultOption = {
  baseUrl: "/",
  timeout: 30000,
  mode: "cors",
  credentials: "include",
  headers: {
    "Content-Type": "application/x-www-form-urlencoded",
    Accept: "application/json",
  },
};

/**
 * design
 *  |-----custom transform FaxiosRequest ---->|or|-----global transform FaxiosRequest ---->|
 *  |--------request interceptor ------------>|
 *  |-------FaxiosRequest => Request -------->|
 *  |-----------before request -------------->|
 *  |--------_ window.fetch(Request)----_---->|
 *  |-----------after request --------------->|
 *  |------Response => FaxiosResponse ------->|
 *  |--------response interceptor ----------->|
 *  |-----custom transform FaxiosResponse---->|or|-----global transform FaxiosRequest ---->|
 */
/**
 * 定义FetchClient要做的事
 */
var Faxios = /** @class */ (function() {
  function Faxios(options) {
    if (options === void 0) {
      options = {};
    }
    this.defaultOps = {};
    this.interceptors = {
      request: [],
      response: [],
    };
    Object.assign(this.defaultOps, defaultOption, options);
  }
  Faxios.prototype.addRequestInterceptor = function(interceptor) {
    this.interceptors.request.push(interceptor);
  };
  Faxios.prototype.addResponseInterceptor = function(interceptor) {
    this.interceptors.response.push(interceptor);
  };
  Faxios.prototype.config = function(options) {
    if (options === void 0) {
      options = {};
    }
    Object.assign(this.defaultOps, options);
  };
  /**
   * define FaxiosRequest=>FaxiosResponse
   * @param req
   */
  Faxios.prototype.request = function(req) {
    return __awaiter(this, void 0, void 0, function() {
      var customOps,
        res,
        timeout,
        beforeRequest,
        afterRequest,
        transformRequest,
        transformResponse,
        request,
        response,
        err_1;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            customOps = req.config || {};
            timeout = customOps.timeout || this.defaultOps.timeout || 30000;
            req.config = Object.assign({}, this.defaultOps, req.config);
            beforeRequest = this.defaultOps.beforeRequest;
            afterRequest = this.defaultOps.afterRequest;
            transformRequest = customOps.transformRequest || this.defaultOps.transformRequest;
            transformResponse = customOps.transformResponse || this.defaultOps.transformResponse;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 11, , 12]);
            if (!transformRequest) return [3 /*break*/, 3];
            return [4 /*yield*/, transformRequest(req)];
          case 2:
            req = _a.sent();
            _a.label = 3;
          case 3:
            // resolve request interceptor
            return [4 /*yield*/, this.resolveRequestInterceptor(req)];
          case 4:
            // resolve request interceptor
            _a.sent();
            return [4 /*yield*/, this.transformRequest(req)];
          case 5:
            request = _a.sent();
            if (beforeRequest) {
              beforeRequest(req, request);
            }
            return [4 /*yield*/, promiseTimeout(timeout, window.fetch(request))];
          case 6:
            response = _a.sent();
            if (afterRequest) {
              afterRequest(req, response);
            }
            return [4 /*yield*/, this.transformResponse(response, req)];
          case 7:
            // transform Response => FaxiosResponse
            res = _a.sent();
            // resolve response interceptor
            return [4 /*yield*/, this.resolveResponseInterceptor(res)];
          case 8:
            // resolve response interceptor
            _a.sent();
            if (!transformResponse) return [3 /*break*/, 10];
            return [4 /*yield*/, transformResponse(res)];
          case 9:
            res = _a.sent();
            _a.label = 10;
          case 10:
            return [2 /*return*/, res];
          case 11:
            err_1 = _a.sent();
            throw err_1;
          case 12:
            return [2 /*return*/];
        }
      });
    });
  };
  Faxios.prototype.transformRequest = function(req) {
    return __awaiter(this, void 0, void 0, function() {
      var customOps, reqOps, mode, credentials, method, query, payload, url, headers, body, contentType, requestInit;
      return __generator(this, function(_a) {
        customOps = req.config || {};
        reqOps = Object.assign({}, this.defaultOps, customOps);
        (mode = reqOps.mode), (credentials = reqOps.credentials);
        (method = req.method), (query = req.query), (payload = req.payload);
        url = req.url;
        headers = req.headers;
        if (reqOps.baseUrl) {
          url = reqOps.baseUrl + url;
        }
        if (!url) {
          throw new Error("request: url is undefined.");
        }
        if (!method) {
          throw new Error("request: method is undefined.");
        }
        if (method.toUpperCase() === "GET") {
          url += "?" + serialize(query);
        }
        headers = Object.assign({}, this.defaultOps.headers, headers || {});
        body = payload;
        contentType = headers["Content-Type"];
        if (body) {
          if (contentType === "application/x-www-form-urlencoded") {
            body = serialize(payload);
          } else if (contentType === "multipart/form-data") {
            body = getFormData(payload);
            delete headers["Content-Type"];
          } else if (contentType === "application/json") {
            body = JSON.stringify(payload);
          } else {
            body = serialize(payload);
          }
        }
        requestInit = {
          method: method,
          headers: headers,
          body: body,
          mode: mode,
          credentials: credentials,
        };
        return [2 /*return*/, new Request(url, requestInit)];
      });
    });
  };
  Faxios.prototype.transformResponse = function(response, req) {
    return __awaiter(this, void 0, void 0, function() {
      var resp, contentType, _a, _b, _c, _d, e_1;
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            resp = {
              data: null,
              status: response.status,
              statusText: response.statusText,
              headers: transformHeader(response.headers),
              config: req.config || {},
              request: req,
              originalResponse: response,
            };
            if (!response.ok) return [3 /*break*/, 9];
            contentType = response.headers.get("Content-Type") || "application/json";
            contentType = contentType.toLowerCase();
            if (!/^application\/json/.test(contentType)) return [3 /*break*/, 2];
            _a = resp;
            return [4 /*yield*/, response.json()];
          case 1:
            _a.data = _e.sent();
            return [3 /*break*/, 9];
          case 2:
            if (!/^text\/plain/.test(contentType)) return [3 /*break*/, 4];
            _b = resp;
            return [4 /*yield*/, response.text()];
          case 3:
            _b.data = _e.sent();
            return [3 /*break*/, 9];
          case 4:
            if (!/^application\/octet-stream/.test(contentType)) return [3 /*break*/, 6];
            _c = resp;
            return [4 /*yield*/, response.blob()];
          case 5:
            _c.data = _e.sent();
            return [3 /*break*/, 9];
          case 6:
            _e.trys.push([6, 8, , 9]);
            _d = resp;
            return [4 /*yield*/, response.json()];
          case 7:
            _d.data = _e.sent();
            return [3 /*break*/, 9];
          case 8:
            e_1 = _e.sent();
            console.warn("unknow content-type to parse response!");
            return [3 /*break*/, 9];
          case 9:
            return [2 /*return*/, resp];
        }
      });
    });
  };
  Faxios.prototype.resolveRequestInterceptor = function(request) {
    return resolveTasks(request, this.interceptors.request);
  };
  Faxios.prototype.resolveResponseInterceptor = function(response) {
    return resolveTasks(response, this.interceptors.response);
  };
  return Faxios;
})();

/**
 * 数据请求服务
 * 使用HttpClient
 */
var FaxiosApi = /** @class */ (function(_super) {
  __extends(FaxiosApi, _super);
  function FaxiosApi() {
    return (_super !== null && _super.apply(this, arguments)) || this;
  }
  FaxiosApi.prototype.get = function(url, options) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        options.method = "GET";
        options.url = url;
        return [2 /*return*/, this.request(options)];
      });
    });
  };
  FaxiosApi.prototype.post = function(url, options) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        options.method = "POST";
        options.url = url;
        return [2 /*return*/, this.request(options)];
      });
    });
  };
  FaxiosApi.prototype.delete = function(url, options) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        options.method = "DELETE";
        options.url = url;
        return [2 /*return*/, this.request(options)];
      });
    });
  };
  FaxiosApi.prototype.put = function(url, options) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        options.method = "PUT";
        options.url = url;
        return [2 /*return*/, this.request(options)];
      });
    });
  };
  FaxiosApi.prototype.patch = function(url, options) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        options.method = "PATCH";
        options.url = url;
        return [2 /*return*/, this.request(options)];
      });
    });
  };
  return FaxiosApi;
})(Faxios);
var defaultApi = new FaxiosApi();
defaultApi.FaxiosApi = FaxiosApi;

module.exports = defaultApi;
